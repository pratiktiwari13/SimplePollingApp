{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/poll.service.ts","webpack:///./src/app/poll/poll.component.css","webpack:///./src/app/poll/poll.component.html","webpack:///./src/app/poll/poll.component.ts","webpack:///./src/app/question.service.ts","webpack:///./src/app/question/question.component.css","webpack:///./src/app/question/question.component.html","webpack:///./src/app/question/question.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {RouterModule, Routes} from '@angular/router';\nimport {QuestionComponent} from './question/question.component';\nimport {PollComponent} from './poll/poll.component';\n\n\n\n\n/*Routes for routing module*/\nconst routes: Routes = [\n  {path: '' , component: QuestionComponent},\n  {path: 'poll/:id' , component: PollComponent}\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forRoot(routes),\n  ],\n  exports: [\n    RouterModule\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\n\n/*Feature Module*/\nimport { ClipboardModule } from 'ngx-clipboard';\n\n\n/*Third Party Modules*/\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { QuestionComponent } from './question/question.component';\nimport { PollComponent } from './poll/poll.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    QuestionComponent,\n    PollComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    NgbModule.forRoot(),\n    FormsModule,\n    HttpClientModule,\n    ClipboardModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {Question} from './question/question';\nimport {Result} from './Result';\nimport {Observable} from 'rxjs';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {catchError, tap} from 'rxjs/operators';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PollService {\n\n  private pollUrl = 'poll';  // URL to web api\n\n  constructor(private http: HttpClient) { }\n\n  /** GET poll question by id. Will 404 if id not found */\n  getPollQuestion(id): Observable<Question> {\n    const url = `${this.pollUrl}/${id}`;\n    return this.http.get<Question>(url);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"question\\\">\\n  <div class=\\\"container\\\">\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <h1 class=\\\"text-center text-success\\\">Simple Polling App</h1>\\n      </div>\\n    </div>\\n    <br>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <form #formRef=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n\\n          <div class=\\\"form-group\\\">\\n            <label  for=\\\"question_value\\\">Question:</label>\\n            <input [disabled]=\\\"true\\\" [(ngModel)]=\\\"question.value\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"value\\\" id=\\\"question_value\\\">\\n          </div>\\n\\n          <!--ultimate solution https://embed.plnkr.co/6YPQXH/-->\\n\\n          <div *ngFor=\\\"let option of question.options; let i=index\\\">\\n            <div class=\\\"form-check\\\">\\n              <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"optionRadios\\\" id=\\\"optionRadios{{i}}\\\" [value]=\\\"i\\\" (change)=\\\"changeSelection(i)\\\">\\n              <label class=\\\"form-check-label\\\" for=\\\"optionRadios{{i}}\\\">\\n                {{option.value}}\\n              </label>\\n            </div>\\n          </div>\\n\\n\\n          <button [disabled]=\\\"selectedOption==-1\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport {Question} from '../question/question';\nimport {PollService} from '../poll.service';\nimport {st} from '@angular/core/src/render3';\n\n@Component({\n  selector: 'app-poll',\n  templateUrl: './poll.component.html',\n  styleUrls: ['./poll.component.css']\n})\nexport class PollComponent implements OnInit {\n\n  constructor(private route: ActivatedRoute, private location: Location, private pollService: PollService) { }\n\n  question: Question;\n\n  selectedOption = -1;\n\n  ngOnInit() {\n    // this.getId();\n    this.question = {value: 'a nice question', options: [{value: 'a nice answer'} , {value: 'again nice answer'}]};\n  }\n\n  getId(): void {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.pollService.getPollQuestion(id)\n      .subscribe(question => this.question = question);\n  }\n\n  changeSelection(i) {\n    this.selectedOption = i;\n  }\n\n  onSubmit() {\n    console.log(this.selectedOption);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport {Question} from './question/question';\nimport {Observable} from 'rxjs';\nimport {HttpClient , HttpHeaders} from '@angular/common/http';\nimport {Result} from './Result';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n\n  private questionUrl = 'api/question';  // URL to web api\n\n  constructor(private http: HttpClient) { }\n\n  /** POST: add a new question to the server */\n  addQuestion (question: Question): Observable<Result> {\n    return this.http.post<Result>(this.questionUrl, question, httpOptions);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <h1 class=\\\"text-center text-success\\\">Simple Polling App</h1>\\r\\n    </div>\\r\\n  </div>\\r\\n  <br>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <form #formRef=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label  for=\\\"question_value\\\">Question:</label>\\r\\n          <input [disabled]=\\\"hash\\\" [(ngModel)]=\\\"question.value\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"value\\\" id=\\\"question_value\\\"  placeholder=\\\"Enter your Poll Question\\\" required>\\r\\n          <small [hidden]=\\\"question.value\\\"  class=\\\"form-text  text-danger\\\">*Value is required</small>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n\\r\\n          <label for=\\\"options_value_add\\\">Options:</label> <button  [hidden]=\\\"hash\\\" (click)=\\\"add_option()\\\" id=\\\"options_value_add\\\" class=\\\"btn btn-outline-secondary  btn-sm float-right\\\" type=\\\"button\\\">+</button>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <!--ultimate solution https://embed.plnkr.co/6YPQXH/-->\\r\\n\\r\\n        <div *ngFor=\\\"let option of question.options; let i=index\\\">\\r\\n          <div class=\\\"input-group mb-3\\\" >\\r\\n            <input [disabled]=\\\"hash\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter the Option\\\"  [(ngModel)]=\\\"question.options[i].value\\\" name=\\\"name{{i}}\\\" required>\\r\\n            <div class=\\\"input-group-append\\\" *ngIf=\\\"i!=0 && i!=1\\\">\\r\\n              <button [disabled]=\\\"hash\\\" class=\\\"btn btn-outline-danger\\\" type=\\\"button\\\" (click)=\\\"question.options.splice(i,1)\\\">X</button>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div><small [hidden]=\\\"question.options[i].value\\\"  class=\\\"form-text  text-danger\\\">*Value is required</small></div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <button [hidden]=\\\"hash\\\" [disabled]=\\\"!formRef.form.valid\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <input  type=\\\"text\\\" class=\\\"form-control bg-primary\\\" style=\\\"color: white\\\" [hidden]=\\\"!hash\\\" [(ngModel)]=\\\"question_link\\\" disabled>\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <button ngxClipboard [cbContent]=\\\"question_link\\\"  [hidden]=\\\"!hash\\\" (click)=\\\"copy_link()\\\" class=\\\"btn btn-success\\\">Copy link</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <!--{{question | json}}-->\\r\\n</div>\\r\\n\"","///<reference path=\"../../../node_modules/rxjs/internal/Observable.d.ts\"/>\nimport {Component, OnInit, ViewChild} from '@angular/core';\nimport {AfterViewInit} from '@angular/core';\nimport {Question} from './question';\n\nimport {QuestionService} from '../question.service';\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit, AfterViewInit {\n\n  question: Question = {\n    value: '',\n    options: [{value: ''}, {value: ''}]\n  };\n\n  hash: string;\n\n  question_link: string;\n\n  constructor(private questionService: QuestionService) { }\n\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    // child is set\n  }\n\n  onSubmit() {\n    this.addQuestion(this.question);\n  }\n\n  add_option(): void {\n     this.question.options.push({value: ''});\n  }\n\n  addQuestion(question: Question): void {\n    /*this.questionService.addQuestion(question)\n      .subscribe(response => {\n        this.hash = response.hash;\n      });*/\n    this.hash = '1111111';\n    this.question_link = 'https:google.com/' + this.hash;\n  }\n\n  copy_link(): void {\n    console.log('Link copied to dashboard');\n  }\n\n  /*https://stackoverflow.com/questions/42322968/angular2-dynamic-input-field-lose-focus-when-input-changes*/\n  trackByFn(index: any, item: any) {\n    return index;\n  }\n\n\n}\n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}